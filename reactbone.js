// Generated by CoffeeScript 1.7.0
/*
  @name Reactbone
  @author Chris Andrejewski <chrisishereladies@gmail.com>
  @license GPL v2
  @source http://github.com/andrejewski/reactbone
*/
(function() {
  var Backbone, Reactbone, exports, _;

  if (typeof window === 'undefined' || typeof require === 'function') {
    _ = require('underscore');
    Backbone = require('backbone');
    Reactbone = {};
    exports = Reactbone;
    if (typeof module !== 'undefined') {
      module.exports = exports;
    }
  } else {
    Reactbone = this;
  }

  Reactbone.ReactModel = Backbone.Model.extend({
    property: function(name, component) {
      var components;
      this.properties = this.properties || {};
      if (typeof name === 'object') {
        components = name;
      } else if (!component) {
        return this.properties[name];
      } else {
        components = {};
        components[name] = component;
      }
      _.each(components, (function(_this) {
        return function(component, name) {
          var handler, listener, pass, vent;
          _this[name] = _this.properties[name] = component;
          vent = function(model, collectionOrValue, options) {
            this.trigger("change:_" + name, this, this.toReactProps(name), options);
            return this.trigger("change", this, options);
          };
          handler = _.bind(vent, _this);
          _this.listenTo(component, 'change add destroy remove', handler);
          _this.toReactProps(name);
          pass = function(m, value) {
            if (value == null) {
              value = this.get(name);
            }
            if (typeof value === 'object') {
              component.set(value, {
                remove: false
              });
              this.toReactProps(name);
            }
            return this.unset(name);
          };
          listener = _.bind(pass, _this);
          _this.on("change:" + name, listener);
          return listener();
        };
      })(this));
      return this;
    },
    helper: function(name, func) {
      var funcs;
      this.helpers = this.helpers || {};
      if (typeof name === 'object') {
        funcs = name;
      } else if (!func) {
        return this.helpers[name];
      } else {
        funcs = {};
        funcs[name] = func;
      }
      _.each(funcs, (function(_this) {
        return function(func, name) {
          var dunc;
          if (typeof func === 'string') {
            func = _this[name];
          }
          return _this.helpers[name] = dunc = _.bind(func, _this);
        };
      })(this));
      return this;
    },
    toReactProps: function(name) {
      var component, data;
      this._reactors = this._reactors || {};
      if (name) {
        component = this.properties[name];
        data = this._reactors[name] = _.result(component, 'toReact') || component.toJSON();
        return data;
      }
      _.each(this.properties, (function(_this) {
        return function(component, name) {
          return _this._reactors[name] = _.result(component, 'toReact') || component.toJSON();
        };
      })(this));
      return this._reactors;
    },
    toReact: function() {
      return _.extend(this.toJSON(), this._reactors, this.helpers);
    }
  });

  Reactbone.ReactCollection = Backbone.Collection.extend({
    toReact: function() {
      return this.map((function(_this) {
        return function(model) {
          return _.result(model, 'toReact') || model.toJSON();
        };
      })(this));
    }
  });

}).call(this);
